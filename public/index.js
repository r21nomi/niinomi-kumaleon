!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){const i=n(1),o=n(2);let r,s,a;const l=[],u=[],h=[],c=[],f=[],d=[],v=[],g=[],p=[],x=[],m=[],y=[],b=["https://coolors.co/000000","https://coolors.co/c52233","https://coolors.co/5b2a86","https://coolors.co/eeba0b","https://coolors.co/1098f7","https://coolors.co/00ffc5"],w=["コード💻で切り拓く、アート🖼の新たな地平🌅。","Gen Art 🖥 is the future🚀.","@!+-?*/,[=}%:~&#_;*[>.$(¥","🐻 KUMA 🌈 熊 🎌 くま 🧸 BEAR 🎨"];let R,E,T,C=0,A=0,H=[0];const S=t=>{if(/^#([0-9A-F]{3}){1,2}$/i.test(t)){let e=new THREE.Color(t).toArray().map(t=>{let e=Math.round(1e3*t)/1e3;return-1===e.toString().indexOf(".")&&(e+=".0",e=parseFloat(e)),e});return{r:e[0],g:e[1],b:e[2]}}return{r:0,g:0,b:0}},M=(()=>{let t="0x";for(let e=0;e<64;e++)t+=Math.floor(16*Math.random()).toString(16);return t})(),B=new class{constructor(t){this.useA=!1;let e=function(t){let e=parseInt(t.substr(0,8),16),n=parseInt(t.substr(8,8),16),i=parseInt(t.substr(16,8),16),o=parseInt(t.substr(24,8),16);return function(){e|=0,n|=0,i|=0,o|=0;let t=(e+n|0)+o|0;return o=o+1|0,e=n^n>>>9,n=i+(i<<3)|0,i=i<<21|i>>>11,i=i+t|0,(t>>>0)/4294967296}};this.prngA=new e(t.substr(2,32)),this.prngB=new e(t.substr(34,32));for(let t=0;t<1e6;t+=2)this.prngA(),this.prngB()}random_dec(){return this.useA=!this.useA,this.useA?this.prngA():this.prngB()}random_num(t,e){return t+(e-t)*this.random_dec()}random_int(t,e){return Math.floor(this.random_num(t,e+1))}random_bool(t){return this.random_dec()<t}random_choice(t){return t[this.random_int(0,t.length-1)]}}(M),F=t=>.299*t.r+.587*t.g+.114*t.b<80/255?"#ffffff":"#000000",_=()=>{let t=T.text,e=Array.from(t).slice(0,25);for(;e.length<25;)e.push("　");const n=document.createElement("canvas");n.width=1e3,n.height=1e3;const i=n.getContext("2d");i.font="160px 'Arial'";const o=B.random_choice(T.bgColor);i.fillStyle=(t=>{t=[t.r,t.g,t.b];for(let e of t)if(e>1||e<0)return"";return"#"+(new THREE.Color).fromArray(t).getHexString()})(o),i.fillRect(0,0,n.width,n.height),i.fillStyle=F(o),i.textAlign="center",i.textBaseline="middle";for(let t=0;t<e.length;t++){const n=t%5*200+100,o=200*Math.floor(t/5)+100;i.fillText(e[t],n,o)}const r=new THREE.Texture(n);r.needsUpdate=!0,E.texture.value=r,E.textureResolution.value=new THREE.Vector2(n.width,n.height),E.textureBlockSize.value=5},z=()=>{var t;T={text:B.random_choice(w),textColor:S("#ffffff"),bgColor:(t=B.random_int(0,b.length),0===b.length?[]:b[t%b.length].split("/")[3].split("-").map(t=>"#"+t)).map(t=>S(t)),tileRatioOffset:B.random_num(0,.2),dynamic:B.random_bool(.1),division:B.random_int(10,12),divider:B.random_bool(.1)?.8:0},console.log(T),E={time:{type:"f",value:1},resolution:{type:"v2",value:new THREE.Vector2},texture:{type:"t",value:null},textureResolution:{type:"v2",value:new THREE.Vector2},textureBlockSize:{type:"f",value:1},forceRadius:{value:1},pointerForce:{value:1},pointerForceFactor:{value:0},pointerPos:{value:new THREE.Vector2}},R=new P(-window.innerWidth/2,-window.innerHeight/2,window.innerWidth,window.innerHeight,0),(()=>{r=new THREE.WebGLRenderer,s=new THREE.Scene;const t=F(B.random_choice(T.bgColor));s.background=new THREE.Color(t),a=new THREE.BufferGeometry,a.setIndex(f),a.setAttribute("index",new THREE.Uint16BufferAttribute(l,1)),a.setAttribute("totalIndex",new THREE.Float32BufferAttribute([...Array(l.length)].map((t,e)=>C),1)),a.setAttribute("position",new THREE.Float32BufferAttribute(u,3)),a.setAttribute("uv",new THREE.Uint16BufferAttribute(h,2)),a.setAttribute("size",new THREE.Float32BufferAttribute(p,2)),a.setAttribute("offset",new THREE.Float32BufferAttribute(c,2)),a.setAttribute("padding",new THREE.Float32BufferAttribute(d,2)),a.setAttribute("bgColor",new THREE.Float32BufferAttribute(v,3)),a.setAttribute("textColor",new THREE.Float32BufferAttribute(g,3)),a.setAttribute("direction",new THREE.Float32BufferAttribute(x,1)),a.setAttribute("ratio",new THREE.Float32BufferAttribute(m,1)),a.setAttribute("weight",new THREE.Float32BufferAttribute(y,2));const e=new THREE.RawShaderMaterial({uniforms:E,vertexShader:i,fragmentShader:o,transparent:!0,blending:THREE.NormalBlending,depthTest:!0,wireframe:!1,glslVersion:THREE.GLSL1}),n=new THREE.Mesh(a,e);s.add(n)})(),_()};class P{constructor(t,e,n,i,o){if(this.x=t,this.y=e,this.w=n,this.h=i,this.age=o,this.children=[],this.offset=Math.floor(50*Math.random()+1),this.ratio=.5+(2*Math.random()-1)*T.tileRatioOffset,this.targetRatio=this.ratio,this.shouldRender=!1,this.id=-1,this.impulse=0,this.updateCount=0,this.age<T.division){const t=this.age+1;if(this.age%2==0){const e=this.w*this.ratio,n=this.w*(1-this.ratio);this.children[0]=new P(this.x,this.y,e,this.h,t),this.children[1]=new P(this.x+e,this.y,n,this.h,t)}else{const e=this.h*this.ratio,n=this.h*(1-this.ratio);this.children[0]=new P(this.x,this.y,this.w,e,t),this.children[1]=new P(this.x,this.y+e,this.w,n,t)}}else this.draw(!1)}updateTarget(t){if(this.children.length>0){this.targetRatio=t||Math.random();const e=t||null;this.children[0].updateTarget(e),this.children[1].updateTarget(e)}}update(t=null){if(t&&(this.x=t.x,this.y=t.y,this.w=t.w,this.h=t.h,this.impulse=t.impulse),this.children.length>0){let t=Math.abs(this.ratio-this.targetRatio);t<.002&&(this.targetRatio=Math.random(),this.updateCount++),t<.005&&(t=0);const e=.5,n=.1,i=Math.max(Math.min(Math.abs(this.targetRatio-this.ratio)/e,n),0);if(this.ratio+=(this.targetRatio-this.ratio)*i,this.ratio=Math.max(Math.min(this.ratio,1),0),this.age%2==0){const e=this.x,n=this.y,i=this.w*this.ratio,o=this.h;this.children[0].update({x:e,y:n,w:i,h:o,impulse:t});const r=e+i,s=n,a=this.w*(1-this.ratio),l=this.h;this.children[1].update({x:r,y:s,w:a,h:l,impulse:t})}else{const e=this.x,n=this.y,i=this.w,o=this.h*this.ratio;this.children[0].update({x:e,y:n,w:i,h:o,impulse:t});const r=this.x,s=this.y+o,a=this.w,l=this.h*(1-this.ratio);this.children[1].update({x:r,y:s,w:a,h:l,impulse:t})}}else this.draw(!0)}draw(t=!1){if(this.shouldRender=!0,t){const t=this.getDistanceFromScreenCenter();for(let e=0;e<4;e++){const n=4*this.id+e,i=a.attributes.position;i.setXYZ(n,this.x,this.y,0),i.needsUpdate=!0;const o=a.attributes.size;o.setXY(n,this.w,this.h),o.needsUpdate=!0;const r=a.attributes.ratio;r.setX(n,this.impulse),r.needsUpdate=!0;const s=a.attributes.direction;s.setX(n,this.getDirection()),s.needsUpdate=!0;const l=a.attributes.weight;l.setXY(n,t.x,t.y),l.needsUpdate=!0}}else{this.id=C;const t=this.getDistanceFromScreenCenter();for(let e=0;e<4;e++)u.push(this.x,this.y,0),p.push(this.w,this.h),x.push(this.getDirection()),m.push(this.ratio),y.push(t.x,t.y);const e=B.random_choice(T.bgColor);for(let t=0;t<4;t++)l.push(this.id),d.push(T.divider,T.divider),v.push(e.r,e.g,e.b),g.push(T.textColor.r,T.textColor.g,T.textColor.b);h.push(0,0,1,0,1,1,0,1),c.push(0,0,1,0,1,1,0,1);const n=4*this.id;f.push(n+0,n+1,n+2,n+2,n+3,n+0),C++}}getDirection(){return Math.abs(this.w-this.h)<100?-1:this.w>this.h?1:0}getCenter(){return{x:this.x+this.w/2,y:this.y+this.h/2}}getDistanceFromScreenCenter(){const t=this.getCenter(),e=window.innerWidth,n=window.innerHeight;return{x:(t.x+e/2)/e,y:(t.y+n/2)/n}}}let I,U,k,O=1,j=!1;kumaleon.options={onInit:()=>{I=new THREE.OrthographicCamera(-1,1,1,-1,.1,4),I.position.z=2,I.lookAt(0,0,0),I.matrixAutoUpdate=!1,k=new THREE.Clock,z();const t=r.domElement;document.querySelector(".js-main").appendChild(t),U=new THREE.Vector2,window.addEventListener("pointermove",t=>{U.x=t.clientX,U.y=t.clientY,j=!0}),kumaleon.setCanvas(t)},onUpdate:()=>{E.pointerPos.value.x=U.x*O,E.pointerPos.value.y=U.y*O,j&&(E.pointerForceFactor.value+=.1*(1-E.pointerForceFactor.value));const t=k.getElapsedTime();if(E.time.value=t,H[0]=t,E.forceRadius.value=800*O,E.pointerForce.value=400*O,R&&T.dynamic){R.update();const t=Math.floor(H[0]);(0===t||t!==A&&t%10==0)&&(R.updateTarget(.5),A=t)}r.render(s,I)},onResize:()=>{O=Math.min(2,window.devicePixelRatio);const t=window.innerWidth,e=window.innerHeight,n=.5*t,i=.5*e;I.left=-n,I.right=n,I.top=i,I.bottom=-i,I.updateProjectionMatrix(),E.resolution.value.x=t*O,E.resolution.value.y=e*O,r.setPixelRatio(O),r.setSize(t,e)}}},function(t,e){t.exports="precision mediump float;\n\nattribute float index;\nattribute float totalIndex;\nattribute vec3 position;\nattribute vec2 uv;\nattribute vec2 size;\nattribute vec2 offset;\nattribute vec2 padding;\nattribute vec3 bgColor;\nattribute vec3 textColor;\nattribute float direction;\nattribute float ratio;\nattribute vec2 weight;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float time;\nuniform float uWidth;\nuniform float uHeight;\nuniform float duration;\n\nvarying float vIndex;\nvarying float vTotalIndex;\nvarying vec2 vUv;\nvarying vec3 vBgColor;\nvarying vec3 vTextColor;\nvarying vec2 vResolution;\nvarying float vDirection;\nvarying float vRatio;\nvarying vec2 vWeight;\n\nvoid main() {\n    vIndex = index;\n    vTotalIndex = totalIndex;\n    vUv = uv;\n    vBgColor = bgColor;\n    vTextColor = textColor;\n    vResolution = vec2(size.x - padding.x, size.y - padding.y);\n    vDirection = direction;\n    vRatio = ratio;\n    vWeight = weight;\n\n    float t = time / duration;\n\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    mvPosition.xy += offset * vResolution;\n\n    gl_Position = projectionMatrix * mvPosition;\n}"},function(t,e){t.exports="precision mediump float;\n\nconst float PI = 3.1415926535897932384626433832795;\n\nuniform vec2 resolution;\nuniform float time;\nuniform sampler2D texture;\nuniform vec2 textureResolution;\nuniform float textureBlockSize;\n\nvarying float vIndex;\nvarying float vTotalIndex;\nvarying vec2 vUv;\nvarying vec3 vBgColor;\nvarying vec3 vTextColor;\nvarying vec2 vResolution;\nvarying float vDirection;\nvarying float vRatio;\nvarying vec2 vWeight;\n\nfloat rand(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat atan2(float y, float x){\n    return x == 0.0 ? sign(y) * PI / 2.0 : atan(y, x);\n}\n\n/**\n * Reference\n * https://karanokan.info/2019/03/31/post-2465\n */\nfloat polygon(vec2 p, float n, float size){\n    float a = atan2(p.x, p.y) + PI;\n    float r = 2.0 * PI / n;\n    return cos(floor(0.5 + a / r) * r - a) * length(p) - size;\n}\n\nvec2 getUVForTexture (vec2 uv, float t) {\n    float count = textureBlockSize;\n    vec2 pos = vec2(\n        floor(fract(t) * count),\n        floor(mod(t, count))\n    );\n    vec2 eachSize = textureResolution / count / textureResolution;\n    vec2 ff = vec2(pos.x, pos.y);\n\n    return vec2(\n        uv.x * eachSize.x + eachSize.x * ff.x,\n        uv.y * eachSize.y + (1.0 - eachSize.y) - eachSize.y * ff.y\n    );\n}\n\nfloat getTypePos(float index) {\n    return index / textureBlockSize;\n}\n\nvoid main() {\n    vec2 uv = (vUv.xy * vResolution * 2.0 - vResolution.xy) / min(vResolution.x, vResolution.y);\n    bool isOver = abs(uv.x) > 1.0 || abs(uv.y) > 1.0;\n    uv = uv * 0.5 + 0.5;\n\n    float count = textureBlockSize;\n    float totalCount = count * count;\n\n    vec2 weight = (vWeight * resolution * 2.0 - resolution.xy) / min(resolution.x, resolution.y);\n\n    vec2 ratio = vec2(\n        max((vResolution.x / vResolution.y) / (textureResolution.x / textureResolution.y), 1.0),\n        max((vResolution.y / vResolution.x) / (textureResolution.y / textureResolution.x), 1.0)\n    );\n\n    // Triangle\n//    float triangle = polygon(weight, 3.0, 0.0);\n//    float n = 3.0;\n//    triangle = fract(triangle * n - time);\n//    float t = 1.0 - step(0.7, triangle);\n//    t = mix(getTypePos(0.0), getTypePos(mod(time + rand(weight)*30.0, totalCount) + 1.0), t);\n\n    // Ellipse\n    float t = -length(weight * 2.0) + time;\n\n    vec2 uvForTex = getUVForTexture(uv, t);\n\n    vec3 bgColor = vBgColor;\n    vec3 txtColor = vTextColor;\n    vec4 tex = texture2D(texture, uvForTex);\n    vec3 color = mix(bgColor, txtColor, tex.rgb);\n    color = mix(bgColor, tex.rgb, step(0.1, t));\n\n    if (isOver) {\n        color = bgColor;\n    }\n\n    gl_FragColor = vec4(color, 1.0);\n}"}]);